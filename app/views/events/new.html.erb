<div class="body-container" data-controller="chatgpt-request">
  <div class="loader d-none" data-chatgpt-request-target="loader">
    <div id="loader-wrapper">
			<div id="page">
        <div id="phrase_box">
          <svg width="100%" height="100%">
            <defs>
              <style type="text/css">
              @font-face {
              font-family: "Proxima";
              src: url('');
              }
              </style>
              <mask id="mask" maskUnits="userSpaceOnUse" maskContentUnits="userSpaceOnUse">
                <linearGradient id="linearGradient" gradientUnits="objectBoundingBox" x2="0" y2="1">
                <stop stop-color="white" stop-opacity="0" offset="0%"/>
                <stop stop-color="white" stop-opacity="1" offset="30%"/>
                <stop stop-color="white" stop-opacity="1" offset="70%"/>
                <stop stop-color="white" stop-opacity="0" offset="100%"/>
                </linearGradient>
                <rect width="100%" height="100%" fill="url(#linearGradient)"/>
              </mask>
            </defs>
            <g width="100%" height="100%" style="mask: url(#mask);">
              <g id="phrases"></g>
            </g>
          </svg>
        </div>
        <div id="ighex">
          <div class="preloader loading">
            <span class="slice"></span>
            <span class="slice"></span>
            <span class="slice"></span>
            <span class="slice"></span>
            <span class="slice"></span>
            <span class="slice"></span>
          </div>
        </div>
	  	</div>


	</div>
  </div>

  <%= simple_form_for @event, data: { chatgpt_request_target: "form", action: "submit->chatgpt-request#fetchApi"} do |f| %>
  <h1 class="page-title">Trouve le Geeft parfait</h1>

    <div class="form" data-controller="find-values checkboxes">
      <div class="body-category" data-controller="budget-range">
        <div class="category-title" id="budget-title">Budget</div>
          <div class="price-content">
            <label>Min :</label>
            <label id="min-value" data-budget-range-target="min"></label>
            <label>- Max :</label>
            <label id="max-value"  data-budget-range-target="max"></label>
        </div>
        <div class="range-slider">
          <div class="range-fill" data-budget-range-target="fill"></div>
            <input
              data-budget-range-target="input"
              name="event[budget_min]"
              type="range"
              class="min-price"
              value="100"
              min="10"
              max="1000"
              step="10"
            />
            <input
              data-budget-range-target="input"
              name="event[budget_max]"
              type="range"
              class="max-price"
              value="250"
              min="10"
              max="1000"
              step="10"
            />
        </div>
        <div>
          <%= f.range_field :budget_min, min: 5, max: 500, step: 5, data: { budget_range_target: "starting" }  %>
        </div>
        <div>
          <%=  f.range_field :budget_max, min: 10, max: 1000, step: 10, data: { budget_range_target: "ending" } %>
        </div>
      </div>

      <div class="body-category">
        <%= f.label :age, class: "category-title" %>
        <div class="crit-age">
          <div class="range-slider">
              <div class="range-fill" data-budget-range-target="fill"></div>
              <input
                name="event[age]"
                min="1"
                max="100"
                type="range"
                step="1"
                class="min-age"
                value="30"
                data-find-values-target="age"
                data-action="input->find-values#ageUpdate"
              />
          </div>
        </div>
        <div class = "" data-find-values-target="ageValue">
        </div>
      </div>

      <div class="body-category">
        <div class="crit-genre" data-controller="gender-check">
          <%# cacher cette partie pour intégrer juste des boutons qui active la valeur à intégrer au form %>
          <%= f.input :genre, collection: ['neutral', 'female', 'male'], as: :radio_buttons, input_html: { data: { target: "gender" } } %>
          <div class="genre-buttons">
            <div class="genre-button neutral" data-action="click->gender-check#neutral"><i class="fa-solid fa-mars-and-venus"></i></div>
            <div class="genre-button female" data-action="click->gender-check#female"><i class="fa-solid fa-venus"></i></div>
            <div class="genre-button male" data-action="click->gender-check#male"><i class="fa-solid fa-mars"></i></div>
          </div>
        </div>
      </div>

      <div class="body-category">
        <div class="crit-lien">
          <%= f.input :lien, collection: Event::LIENS.sort, as: :radio_buttons, input_html: { class: "pill-lien", data: { action: "click->checkboxes#checked" } } %>
        </div>
      </div>

      <div class="body-category">
        <div class="crit-occasion">
          <%= f.input :occasion, collection: Event::OCCASIONS.sort, as: :radio_buttons, input_html: { class: "pill-occasion", data: { action: "click->checkboxes#checked" } } %>
        </div>
      </div>

    <div data-controller="custom-interest">
      <div class="body-category">
        <div class="crit-interest" data-custom-interest-target="divInterest">
          <legend class="col-form-label pt-0">Centre d'intérêts</legend>
          <div class="interest-comment">(3 maximum)</div>
          <%= f.input :subject, label: "", collection: Event::INTERESTS.sort, as: :check_boxes, include_hidden: false, input_html: { class: "pill-interest", data: { action: "click->checkboxes#checked" } }  %>
        </div>
      </div>

      <div class="body-category">
        <div class="crit-custom-interest" >
          <legend class="col-form-label pt-0">Ajoute ton propre intérêt</legend>
          <div class="interest-comment">(1 maximum)</div>
          <div class="custom-input">
            <%= f.input :new_subject, label: "", input_html: { data: { custom_interest_target: "inputInterest" } }, maxlength: 20 %>
          </div>
          <div class="custom-input">
            <input type="text" id="new-input-box" class="new-input">
            <button data-action="click->custom-interest#addcustominterestasapill" class="function-btn" id="addButton" disabled>
              <i class="fa-solid fa-plus"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
    <%= f.submit 'go geeft', class: "big-btn" %>
    <% end %>
  </div>
</div>

<script>
  var checkmarkIdPrefix = "loadingCheckSVG-";
var checkmarkCircleIdPrefix = "loadingCheckCircleSVG-";
var verticalSpacing = 50;

function shuffleArray(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
}
$(document).ready(function() {

	setTimeout(function(){
		$('body').addClass('loaded');

	}, 15000);

});
function createSVG(tag, properties, opt_children) {
  var newElement = document.createElementNS("http://www.w3.org/2000/svg", tag);
  for(prop in properties) {
    newElement.setAttribute(prop, properties[prop]);
  }
  if (opt_children) {
    opt_children.forEach(function(child) {
      newElement.appendChild(child);
    })
  }
  return newElement;
}

function createPhraseSvg(phrase, yOffset) {
  var text = createSVG("text", {
    fill: "white",
    x: 50,
    y: yOffset,
    "font-size": 18,
    "font-family": "Arial"
  });
  text.appendChild(document.createTextNode(phrase + "..."));
  return text;
}
function createCheckSvg(yOffset, index) {
  var check = createSVG("polygon", {
    points: "21.661,7.643 13.396,19.328 9.429,15.361 7.075,17.714 13.745,24.384 24.345,9.708 ",
    fill: "rgba(255,255,255,1)",
    id: checkmarkIdPrefix + index
  });
  var circle_outline = createSVG("path", {
    d: "M16,0C7.163,0,0,7.163,0,16s7.163,16,16,16s16-7.163,16-16S24.837,0,16,0z M16,30C8.28,30,2,23.72,2,16C2,8.28,8.28,2,16,2 c7.72,0,14,6.28,14,14C30,23.72,23.72,30,16,30z",
    fill: "white"
  })
  var circle = createSVG("circle", {
    id: checkmarkCircleIdPrefix + index,
    fill: "rgba(255,255,255,0)",
    cx: 16,
    cy: 16,
    r: 15
  })
  var group = createSVG("g", {
    transform: "translate(10 " + (yOffset - 20) + ") scale(.9)"
  }, [circle, check, circle_outline]);
  return group;
}

function addPhrasesToDocument(phrases) {
  phrases.forEach(function(phrase, index) {
    var yOffset = 30 + verticalSpacing * index;
    document.getElementById("phrases").appendChild(createPhraseSvg(phrase, yOffset));
    document.getElementById("phrases").appendChild(createCheckSvg(yOffset, index));
  });
}

function easeInOut(t) {
  var period = 200;
  return (Math.sin(t / period + 100) + 1) /2;
}

document.addEventListener("DOMContentLoaded", function(event) {
  var phrases = shuffleArray(["Connecting to server", "Grabbing objects", "Redndering page", "Resolving IP", "Pondering emptiness", "Considering alternatives", "Shuffling bits", "Waiting for response", "Generating pages", "Simulating workflow", "Empowering humanity", "Being awsome", "Fueling the idea", "Fixing CSS", "Talking to server", "Fetching data"]);
  addPhrasesToDocument(phrases);
  var start_time = new Date().getTime();
  var upward_moving_group = document.getElementById("phrases");
  upward_moving_group.currentY = 0;
  var checks = phrases.map(function(_, i) {
    return {check: document.getElementById(checkmarkIdPrefix + i), circle: document.getElementById(checkmarkCircleIdPrefix + i)};
  });
  function animateLoading() {
    var now = new Date().getTime();
    upward_moving_group.setAttribute("transform", "translate(0 " + upward_moving_group.currentY + ")");
    upward_moving_group.currentY -= 1.35 * easeInOut(now);
    checks.forEach(function(check, i) {
      var color_change_boundary = - i * verticalSpacing + verticalSpacing + 15;
      if (upward_moving_group.currentY < color_change_boundary) {
        var alpha = Math.max(Math.min(1 - (upward_moving_group.currentY - color_change_boundary + 15)/30, 1), 0);
        check.circle.setAttribute("fill", "rgba(255, 255, 255, " + alpha + ")");
        var check_color = [Math.round(255 * (1-alpha) + 120 * alpha), Math.round(255 * (1-alpha) + 154 * alpha)];
        check.check.setAttribute("fill", "rgba(255, " + check_color[0] + "," + check_color[1] + ", 1)");
      }
    })
    if (now - start_time < 30000 && upward_moving_group.currentY > -710) {
      requestAnimationFrame(animateLoading);
    }
  }
  //animateLoading();
});


</script>
